
rule VirTool_BAT_Quiltran_A_{
	meta:
		description = "VirTool:BAT/Quiltran.A!!Quiltran.gen!A,SIGNATURE_TYPE_ARHSTR_EXT,0a 00 0a 00 0b 00 00 "
		
	strings :
		$a_01_0 = {4d 00 61 00 69 00 6e 00 2e 00 62 00 6f 00 6f 00 } //1 Main.boo
		$a_01_1 = {53 00 74 00 61 00 67 00 65 00 2e 00 62 00 6f 00 6f 00 } //1 Stage.boo
		$a_01_2 = {53 00 54 00 2e 00 65 00 78 00 65 00 20 00 3c 00 } //1 ST.exe <
		$a_01_3 = {53 00 79 00 73 00 74 00 65 00 6d 00 2e 00 57 00 65 00 62 00 2e 00 45 00 78 00 74 00 65 00 6e 00 73 00 69 00 6f 00 6e 00 73 00 } //1 System.Web.Extensions
		$a_01_4 = {53 54 32 53 74 61 67 65 72 00 } //1 呓匲慴敧r
		$a_01_5 = {67 65 74 5f 53 65 72 76 65 72 43 65 72 74 69 66 69 63 61 74 65 56 61 6c 69 64 61 74 69 6f 6e 43 61 6c 6c 62 61 63 6b 00 } //1 敧彴敓癲牥敃瑲晩捩瑡噥污摩瑡潩䍮污扬捡k
		$a_01_6 = {42 41 53 45 5f 55 52 4c 00 } //1
		$a_01_7 = {47 65 74 52 65 73 6f 75 72 63 65 46 72 6f 6d 5a 69 70 00 } //1
		$a_01_8 = {45 43 44 69 66 66 69 65 48 65 6c 6c 6d 61 6e 43 6e 67 50 75 62 6c 69 63 4b 65 79 00 } //1 䍅楄晦敩效汬慭䍮杮畐汢捩敋y
		$a_01_9 = {4c 6f 61 64 00 70 61 79 6c 6f 61 64 00 } //1
		$a_01_10 = {48 45 58 50 53 4b 00 55 52 4c } //1 䕈偘䭓唀䱒
	condition:
		((#a_01_0  & 1)*1+(#a_01_1  & 1)*1+(#a_01_2  & 1)*1+(#a_01_3  & 1)*1+(#a_01_4  & 1)*1+(#a_01_5  & 1)*1+(#a_01_6  & 1)*1+(#a_01_7  & 1)*1+(#a_01_8  & 1)*1+(#a_01_9  & 1)*1+(#a_01_10  & 1)*1) >=10
 
}
rule VirTool_BAT_Quiltran_A__2{
	meta:
		description = "VirTool:BAT/Quiltran.A!!Quiltran.gen!A,SIGNATURE_TYPE_ARHSTR_EXT,0d 00 0d 00 0d 00 00 "
		
	strings :
		$a_00_0 = {3d 20 53 54 43 6c 69 65 6e 74 28 47 75 69 64 3a 20 47 75 69 64 28 61 72 67 76 5b 30 5d 29 } //1 = STClient(Guid: Guid(argv[0])
		$a_00_1 = {54 68 72 65 61 64 2e 53 6c 65 65 70 28 47 65 74 53 6c 65 65 70 41 6e 64 4a 69 74 74 65 72 28 29 29 } //1 Thread.Sleep(GetSleepAndJitter())
		$a_00_2 = {3d 20 63 68 61 6e 6e 65 6c 2e 4b 65 79 45 78 63 68 61 6e 67 65 28 65 6e 63 72 79 70 74 65 64 50 75 62 4b 65 79 29 } //1 = channel.KeyExchange(encryptedPubKey)
		$a_00_3 = {22 52 65 6c 65 61 73 65 49 64 22 } //1 "ReleaseId"
		$a_00_4 = {50 61 72 61 6d 65 74 65 72 73 2e 44 75 63 6b 79 } //1 Parameters.Ducky
		$a_00_5 = {50 61 72 61 6d 65 74 65 72 73 2e 50 69 70 65 6c 69 6e 65 } //1 Parameters.Pipeline
		$a_00_6 = {42 6f 6f 43 6f 6d 70 69 6c 65 72 28 } //1 BooCompiler(
		$a_00_7 = {62 79 74 65 73 5f 74 6f 5f 73 65 6e 64 2e 4c 65 6e 67 74 68 20 3d 3d 20 38 31 39 32 30 3a } //1 bytes_to_send.Length == 81920:
		$a_00_8 = {63 6d 64 20 3d 3d 20 27 43 6f 6d 70 69 6c 65 41 6e 64 52 75 6e 27 3a } //1 cmd == 'CompileAndRun':
		$a_00_9 = {63 6d 64 20 3d 3d 20 27 4a 69 74 74 65 72 27 3a } //1 cmd == 'Jitter':
		$a_00_10 = {63 6c 61 73 73 20 53 54 4a 6f 62 3a } //1 class STJob:
		$a_00_11 = {3d 20 48 65 78 32 42 69 6e 61 72 79 28 76 61 6c 75 65 29 } //1 = Hex2Binary(value)
		$a_00_12 = {47 75 69 64 2e 4e 65 77 47 75 69 64 28 29 2e 54 6f 53 74 72 69 6e 67 28 22 6e 22 29 2e 53 75 62 73 74 72 69 6e 67 28 30 2c 20 38 29 } //1 Guid.NewGuid().ToString("n").Substring(0, 8)
	condition:
		((#a_00_0  & 1)*1+(#a_00_1  & 1)*1+(#a_00_2  & 1)*1+(#a_00_3  & 1)*1+(#a_00_4  & 1)*1+(#a_00_5  & 1)*1+(#a_00_6  & 1)*1+(#a_00_7  & 1)*1+(#a_00_8  & 1)*1+(#a_00_9  & 1)*1+(#a_00_10  & 1)*1+(#a_00_11  & 1)*1+(#a_00_12  & 1)*1) >=13
 
}
rule VirTool_BAT_Quiltran_A__3{
	meta:
		description = "VirTool:BAT/Quiltran.A!!Quiltran.gen!A,SIGNATURE_TYPE_ARHSTR_EXT,0c 00 0c 00 0c 00 00 "
		
	strings :
		$a_01_0 = {5c 53 49 4c 45 4e 54 54 52 49 4e 49 54 59 5c 53 49 4c 45 4e 54 54 52 49 4e 49 54 59 } //1 \SILENTTRINITY\SILENTTRINITY
		$a_01_1 = {3c 41 64 64 50 79 74 68 6f 6e 4c 69 62 72 61 72 69 65 73 54 6f 53 79 73 4d 65 74 61 50 61 74 68 3e } //1 <AddPythonLibrariesToSysMetaPath>
		$a_01_2 = {43 72 65 61 74 65 45 6e 67 69 6e 65 00 } //1
		$a_01_3 = {45 43 44 48 4b 65 79 45 78 63 68 61 6e 67 65 00 } //1 䍅䡄敋䕹捸慨杮e
		$a_01_4 = {47 65 74 52 65 73 6f 75 72 63 65 49 6e 5a 69 70 00 } //1
		$a_01_5 = {52 75 6e 49 50 59 45 6e 67 69 6e 65 00 } //1
		$a_01_6 = {46 00 6f 00 75 00 6e 00 64 00 20 00 65 00 6d 00 62 00 65 00 64 00 64 00 65 00 64 00 20 00 49 00 50 00 59 00 20 00 73 00 74 00 64 00 6c 00 69 00 62 00 20 00 3a 00 20 00 7b 00 30 00 7d 00 } //1 Found embedded IPY stdlib : {0}
		$a_03_7 = {61 00 70 00 70 00 65 00 6e 00 64 00 [0-04] 6d 00 65 00 74 00 61 00 5f 00 70 00 61 00 74 00 68 00 [0-04] 70 00 61 00 74 00 68 00 } //1
		$a_01_8 = {72 00 65 00 73 00 6f 00 6c 00 76 00 65 00 20 00 61 00 73 00 73 00 65 00 6d 00 62 00 6c 00 69 00 65 00 73 00 20 00 62 00 79 00 20 00 73 00 74 00 61 00 67 00 69 00 6e 00 67 00 20 00 7a 00 69 00 70 00 } //1 resolve assemblies by staging zip
		$a_01_9 = {49 00 72 00 6f 00 6e 00 50 00 79 00 74 00 68 00 6f 00 6e 00 44 00 4c 00 4c 00 } //1 IronPythonDLL
		$a_01_10 = {41 00 74 00 74 00 65 00 6d 00 70 00 74 00 69 00 6e 00 67 00 20 00 48 00 54 00 54 00 50 00 20 00 50 00 4f 00 53 00 54 00 20 00 74 00 6f 00 20 00 7b 00 30 00 7d 00 } //1 Attempting HTTP POST to {0}
		$a_03_11 = {44 00 45 00 42 00 55 00 47 00 [0-04] 4d 00 61 00 69 00 6e 00 2e 00 70 00 79 00 [0-04] 45 00 78 00 65 00 63 00 75 00 74 00 65 00 } //1
	condition:
		((#a_01_0  & 1)*1+(#a_01_1  & 1)*1+(#a_01_2  & 1)*1+(#a_01_3  & 1)*1+(#a_01_4  & 1)*1+(#a_01_5  & 1)*1+(#a_01_6  & 1)*1+(#a_03_7  & 1)*1+(#a_01_8  & 1)*1+(#a_01_9  & 1)*1+(#a_01_10  & 1)*1+(#a_03_11  & 1)*1) >=12
 
}