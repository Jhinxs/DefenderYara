
rule Exploit_iPhoneOS_Dakkatoni_A{
	meta:
		description = "Exploit:iPhoneOS/Dakkatoni.A,SIGNATURE_TYPE_MACHOHSTR_EXT,0f 00 0f 00 28 00 00 "
		
	strings :
		$a_03_0 = {e8 17 40 f9 a9 83 5c f8 1f 01 09 eb ?? ?? ?? 54 e1 03 00 32 08 00 80 52 a0 03 5c f8 a9 03 5d f8 e2 03 09 aa e3 03 08 aa e4 03 08 aa e5 03 08 aa e6 03 08 aa ?? ?? ?? 94 } //15
		$a_00_1 = {49 6e 76 61 6c 69 64 20 69 6e 70 75 74 20 2d 20 6e 6f 20 6b 65 72 6e 65 6c 20 64 61 74 61 } //1 Invalid input - no kernel data
		$a_00_2 = {49 6e 76 61 6c 69 64 20 69 6e 70 75 74 20 2d 20 6e 6f 74 20 4b 65 72 6e 65 6c 20 28 30 78 25 30 32 78 29 } //1 Invalid input - not Kernel (0x%02x)
		$a_00_3 = {54 68 69 73 20 6f 70 74 69 6f 6e 20 6d 61 6b 65 73 20 74 68 65 20 6b 65 72 6e 65 6c 20 61 6c 6c 6f 77 20 70 72 6f 63 65 73 73 65 73 20 74 6f 20 72 75 6e 20 77 69 74 68 20 69 6e 76 61 6c 69 64 20 65 78 65 63 75 74 61 62 6c 65 20 70 61 67 65 73 2e } //1 This option makes the kernel allow processes to run with invalid executable pages.
		$a_00_4 = {55 6e 61 62 6c 65 20 74 6f 20 65 78 70 6c 6f 69 74 20 6b 65 72 6e 65 6c 2e 20 54 68 69 73 20 69 73 20 6e 6f 74 20 61 6e 20 65 72 72 6f 72 2e 20 52 65 62 6f 6f 74 20 61 6e 64 20 74 72 79 20 61 67 61 69 6e 2e } //1 Unable to exploit kernel. This is not an error. Reboot and try again.
		$a_00_5 = {56 5f 65 78 70 6f 72 74 4b 65 72 6e 65 6c 54 61 73 6b 50 6f 72 74 53 77 69 74 63 68 } //1 V_exportKernelTaskPortSwitch
		$a_00_6 = {56 5f 6b 65 72 6e 65 6c 45 78 70 6c 6f 69 74 50 69 63 6b 65 72 56 69 65 77 } //1 V_kernelExploitPickerView
		$a_00_7 = {56 5f 6b 65 72 6e 65 6c 45 78 70 6c 6f 69 74 54 65 78 74 46 69 65 6c 64 } //1 V_kernelExploitTextField
		$a_00_8 = {5b 2a 5d 20 4b 65 72 6e 65 6c 20 50 61 67 65 20 53 69 7a 65 3a 20 30 78 25 6c 78 } //1 [*] Kernel Page Size: 0x%lx
		$a_00_9 = {5b 2a 5d 20 4b 65 72 6e 65 6c 20 56 65 72 73 69 6f 6e 3a 20 25 73 } //1 [*] Kernel Version: %s
		$a_00_10 = {5b 2a 5d 20 53 75 63 63 65 73 73 66 75 6c 6c 79 20 65 78 70 6c 6f 69 74 65 64 20 6b 65 72 6e 65 6c 2e } //1 [*] Successfully exploited kernel.
		$a_00_11 = {5b 2a 5d 20 61 74 74 65 6d 70 74 20 74 6f 20 72 65 61 64 20 6b 65 72 6e 65 6c 20 6d 65 6d 6f 72 79 20 62 75 74 20 6e 6f 20 6b 65 72 6e 65 6c 20 6d 65 6d 6f 72 79 20 72 65 61 64 20 70 72 69 6d 69 74 69 76 65 73 20 61 76 61 69 6c 61 62 6c 65 } //1 [*] attempt to read kernel memory but no kernel memory read primitives available
		$a_00_12 = {5b 2a 5d 20 61 74 74 65 6d 70 74 20 74 6f 20 77 72 69 74 65 20 74 6f 20 6b 65 72 6e 65 6c 20 6d 65 6d 6f 72 79 20 62 65 66 6f 72 65 20 61 6e 79 20 6b 65 72 6e 65 6c 20 6d 65 6d 6f 72 79 20 77 72 69 74 65 20 70 72 69 6d 69 74 69 76 65 73 20 61 76 61 69 6c 61 62 6c 65 } //1 [*] attempt to write to kernel memory before any kernel memory write primitives available
		$a_00_13 = {5b 2a 5d 20 63 6f 75 6c 64 6e 27 74 20 6c 65 61 6b 20 61 6e 79 20 6b 65 72 6e 65 6c 20 70 6f 69 6e 74 65 72 73 } //1 [*] couldn't leak any kernel pointers
		$a_00_14 = {5b 2a 5d 20 66 61 6b 65 70 6f 72 74 3a 20 30 78 25 6c 6c 78 } //1 [*] fakeport: 0x%llx
		$a_00_15 = {5b 2a 5d 20 6d 61 63 68 5f 70 6f 72 74 5f 61 6c 6c 6f 63 61 74 65 3a 20 25 78 20 25 73 } //1 [*] mach_port_allocate: %x %s
		$a_00_16 = {5b 2a 5d 20 6d 61 63 68 5f 70 6f 72 74 5f 69 6e 73 65 72 74 5f 72 69 67 68 74 20 66 61 69 6c 65 64 3a 20 25 78 20 25 73 } //1 [*] mach_port_insert_right failed: %x %s
		$a_00_17 = {5b 2a 5d 20 70 6f 72 74 3a 20 25 78 } //1 [*] port: %x
		$a_00_18 = {63 72 65 61 74 65 64 20 25 7a 75 20 70 6f 72 74 73 } //1 created %zu ports
		$a_00_19 = {65 78 70 6c 6f 69 74 4d 65 73 73 61 67 65 4c 61 62 65 6c } //1 exploitMessageLabel
		$a_00_20 = {65 78 70 6c 6f 69 74 50 69 63 6b 65 72 44 6f 6e 65 41 63 74 69 6f 6e } //1 exploitPickerDoneAction
		$a_00_21 = {65 78 70 6c 6f 69 74 50 69 63 6b 65 72 54 6f 6f 6c 62 61 72 } //1 exploitPickerToolbar
		$a_00_22 = {65 78 70 6c 6f 69 74 50 72 6f 67 72 65 73 73 4c 61 62 65 6c } //1 exploitProgressLabel
		$a_00_23 = {65 78 70 6f 72 74 4b 65 72 6e 65 6c 54 61 73 6b 50 6f 72 74 53 77 69 74 63 68 } //1 exportKernelTaskPortSwitch
		$a_00_24 = {69 6e 73 74 61 6c 6c 43 79 64 69 61 4c 61 62 65 6c } //1 installCydiaLabel
		$a_00_25 = {69 6e 73 74 61 6c 6c 43 79 64 69 61 53 77 69 74 63 68 } //1 installCydiaSwitch
		$a_00_26 = {69 6e 73 74 61 6c 6c 43 79 64 69 61 53 77 69 74 63 68 56 61 6c 75 65 43 68 61 6e 67 65 64 3a } //1 installCydiaSwitchValueChanged:
		$a_00_27 = {69 74 65 72 61 74 65 5f 65 76 61 6c 75 61 74 65 64 5f 65 78 70 6c 6f 69 74 73 } //1 iterate_evaluated_exploits
		$a_00_28 = {69 74 65 72 61 74 65 5f 65 78 70 6c 6f 69 74 73 } //1 iterate_exploits
		$a_00_29 = {6b 61 6c 6c 6f 63 5f 73 70 72 61 79 5f 70 6f 72 74 } //1 kalloc_spray_port
		$a_00_30 = {6b 65 72 6e 65 6c 45 78 70 6c 6f 69 74 4c 61 62 65 6c } //1 kernelExploitLabel
		$a_00_31 = {6b 65 72 6e 65 6c 45 78 70 6c 6f 69 74 50 69 63 6b 65 72 56 69 65 77 } //1 kernelExploitPickerView
		$a_00_32 = {6b 65 72 6e 65 6c 45 78 70 6c 6f 69 74 54 65 78 74 46 69 65 6c 64 } //1 kernelExploitTextField
		$a_00_33 = {6f 6f 6c 5f 70 6f 72 74 73 5f 73 70 72 61 79 5f 73 69 7a 65 5f 77 69 74 68 5f 67 63 } //1 ool_ports_spray_size_with_gc
		$a_00_34 = {6f 70 65 6e 43 79 64 69 61 42 75 74 74 6f 6e } //1 openCydiaButton
		$a_00_35 = {72 65 73 65 74 43 79 64 69 61 43 61 63 68 65 4c 61 62 65 6c } //1 resetCydiaCacheLabel
		$a_00_36 = {72 65 73 65 74 43 79 64 69 61 43 61 63 68 65 53 77 69 74 63 68 } //1 resetCydiaCacheSwitch
		$a_00_37 = {73 65 74 4b 65 72 6e 65 6c 45 78 70 6c 6f 69 74 50 69 63 6b 65 72 56 69 65 77 3a } //1 setKernelExploitPickerView:
		$a_00_38 = {73 70 72 61 79 65 64 20 25 7a 75 20 62 79 74 65 73 20 74 6f 20 25 7a 75 20 70 6f 72 74 73 20 69 6e 20 6b 61 6c 6c 6f 63 2e 25 75 } //1 sprayed %zu bytes to %zu ports in kalloc.%u
		$a_00_39 = {74 61 70 70 65 64 4f 6e 4f 70 65 6e 43 79 64 69 61 3a } //1 tappedOnOpenCydia:
	condition:
		((#a_03_0  & 1)*15+(#a_00_1  & 1)*1+(#a_00_2  & 1)*1+(#a_00_3  & 1)*1+(#a_00_4  & 1)*1+(#a_00_5  & 1)*1+(#a_00_6  & 1)*1+(#a_00_7  & 1)*1+(#a_00_8  & 1)*1+(#a_00_9  & 1)*1+(#a_00_10  & 1)*1+(#a_00_11  & 1)*1+(#a_00_12  & 1)*1+(#a_00_13  & 1)*1+(#a_00_14  & 1)*1+(#a_00_15  & 1)*1+(#a_00_16  & 1)*1+(#a_00_17  & 1)*1+(#a_00_18  & 1)*1+(#a_00_19  & 1)*1+(#a_00_20  & 1)*1+(#a_00_21  & 1)*1+(#a_00_22  & 1)*1+(#a_00_23  & 1)*1+(#a_00_24  & 1)*1+(#a_00_25  & 1)*1+(#a_00_26  & 1)*1+(#a_00_27  & 1)*1+(#a_00_28  & 1)*1+(#a_00_29  & 1)*1+(#a_00_30  & 1)*1+(#a_00_31  & 1)*1+(#a_00_32  & 1)*1+(#a_00_33  & 1)*1+(#a_00_34  & 1)*1+(#a_00_35  & 1)*1+(#a_00_36  & 1)*1+(#a_00_37  & 1)*1+(#a_00_38  & 1)*1+(#a_00_39  & 1)*1) >=15
 
}